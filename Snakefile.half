configfile: "config.yaml"

import os
pjoin = os.path.join
WF = os.getcwd()

truth_sample = config["params"]["truth"]
pop = config["params"]["pop"]
k = config["params"]["k"]
K = config["params"]["K"]
full_ph = config["params"]["full"]
half_ph = config["params"]["half"]
chroms = config["params"]["chroms"]
chroms_spacesep = chroms.replace(',', ' ')

fullroot_fold = pjoin(config["root"], full_ph)
root_fold = pjoin(config["root"], half_ph)

in_fold_name = config["folds"]["in"]
mid_fold_name = config["folds"]["mid"]
out_fold_name = config["folds"]["out"]

ref_fname = config["files"]["ref"]
cleanref_fname = config["files"]["cleanref"]
vcf_fname = config["files"]["vcf"]
vcf_vg_fname = config["files"]["vcf_vg"]
sample_name = config["files"]["sample"]
sample_bam_fname = sample_name + ".bam"
sample_fname = sample_name + ".fq"

gatkres_fold = pjoin(fullroot_fold, in_fold_name, "gatk")
gatk_snp_res = [pjoin(gatkres_fold, "dbsnp_138.hg19.vcf"),
                pjoin(gatkres_fold, "dbsnp_138.hg19.vcf.idx"),
                pjoin(gatkres_fold, "hapmap_3.3.hg19.sites.vcf"),
                pjoin(gatkres_fold, "hapmap_3.3.hg19.sites.vcf.idx"),
                pjoin(gatkres_fold, "1000G_omni2.5.hg19.sites.vcf"),
                pjoin(gatkres_fold, "1000G_omni2.5.hg19.sites.vcf.idx"),
                pjoin(gatkres_fold, "1000G_phase1.snps.high_confidence.hg19.sites.vcf"),
                pjoin(gatkres_fold, "1000G_phase1.snps.high_confidence.hg19.sites.vcf.idx")]
gatk_indels_res = [pjoin(gatkres_fold, "Mills_and_1000G_gold_standard.indels.hg19.sites.vcf"),
                   pjoin(gatkres_fold, "Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.idx")]

rule run_all:
    input:
        pjoin(root_fold, out_fold_name, "malva", "malva.vcf"),
        pjoin(root_fold, out_fold_name, "vargeno", "vargeno.vcf"),
        pjoin(root_fold, out_fold_name, "bcftools", "bcftools.vcf"),
        pjoin(root_fold, out_fold_name, "gatk", "gatk.vcf"),
        pjoin(root_fold, out_fold_name, "discosnp", "discosnp.vcf"),

##################
### HALVE DATA ###
##################
rule prepare_halfinput:
    input:
        pjoin(root_fold, in_fold_name, vcf_fname),
        pjoin(root_fold, mid_fold_name, cleanref_fname),
        pjoin(root_fold, mid_fold_name, cleanref_fname + ".fai"),
        pjoin(root_fold, mid_fold_name, cleanref_fname[:-3] + ".dict"),
        pjoin(root_fold, mid_fold_name, vcf_vg_fname),
        pjoin(root_fold, mid_fold_name, truth_sample + ".vcf"),
        pjoin(root_fold, mid_fold_name, sample_fname)

rule halve_reference:
    input:
        pjoin(fullroot_fold, mid_fold_name, cleanref_fname)
    output:
        cref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        cref_index = pjoin(root_fold, mid_fold_name, cleanref_fname + ".fai"),
        cref_dict = pjoin(root_fold, mid_fold_name, cleanref_fname[:-3] + ".dict")
    params:
        chroms
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        samtools faidx {input} {chroms_spacesep} > {output.cref}
        gatk CreateSequenceDictionary -R {input} -O {output.cref_dict}
        samtools faidx {output.cref}
        """

rule halve_vcfs:
    input:
        vcf = pjoin(fullroot_fold, in_fold_name, vcf_fname + ".gz"),
        vcf_vg = pjoin(fullroot_fold, mid_fold_name, vcf_vg_fname + ".gz"),
        vcf_truth = pjoin(fullroot_fold, mid_fold_name, truth_sample + ".vcf.gz")
    output:
        hvcf = pjoin(root_fold, in_fold_name, vcf_fname),
        hvcf_vg = pjoin(root_fold, mid_fold_name, vcf_vg_fname),
        hvcf_truth = pjoin(root_fold, mid_fold_name, truth_sample + ".vcf")
    params:
        chroms
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        bcftools view -r {params} {input.vcf} > {output.hvcf}
        bcftools view -r {params} {input.vcf_vg} > {output.hvcf_vg}
        bcftools view -r {params} {input.vcf_truth} > {output.hvcf_truth}
        """

rule halve_sample:
    input:
        pjoin(fullroot_fold, in_fold_name, sample_bam_fname)
    output:
        pjoin(root_fold, mid_fold_name, sample_fname)
    params:
        pjoin(root_fold, "tmp.bam")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        samtools view -@ 7 -b -h -F 0x900 {input} {chroms_spacesep} > {params}
        samtools index {params}
        samtools fastq {params} > {output}
        rm {params} {params}.bai
        """

### MALVA ###
rule malva_geno:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        vcf = pjoin(root_fold, in_fold_name, vcf_fname),
        kmc = pjoin(root_fold, out_fold_name, "malva", "KMC.kmc_suf")
    output:
        vcf = pjoin(root_fold, out_fold_name, "malva", "malva.vcf")
    params:
        kmc_prefix = pjoin(root_fold, out_fold_name, "malva", "KMC")
    log:
        time = pjoin(root_fold, out_fold_name, "malva", "malva.time"),
        out = pjoin(root_fold, out_fold_name, "malva", "malva.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} malva-geno -e 0.001 -k {k} -r {K} -p EUR -c 200 -b 8 {input.ref} {input.vcf} {params.kmc_prefix} > {output.vcf} 2> {log.out}
        """

rule kmc:
    input:
        pjoin(root_fold, mid_fold_name, sample_fname)
    output:
        pjoin(root_fold, out_fold_name, "malva", "KMC.kmc_suf")
    params:
        kmc_prefix = pjoin(root_fold, out_fold_name, "malva", "KMC"),
        tmp_fold = pjoin(root_fold, out_fold_name, "malva", "KMC_tmp")
    log:
        time = pjoin(root_fold, out_fold_name, "malva", "KMC.time"),
        out = pjoin(root_fold, out_fold_name, "malva", "KMC.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        mkdir -p {params.tmp_fold}
        /usr/bin/time -v -o {log.time} kmc -m3 -t4 -k{K} -fm {input} {params.kmc_prefix} {params.tmp_fold} &> {log.out}
        rm -r {params.tmp_fold}
        """

### VARGENO ###
rule vg_index:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        vcf = pjoin(root_fold, mid_fold_name, vcf_vg_fname)
    output:
        index = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.index.chrlens")
    params:
        index_prefix = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.index")
    log:
        time = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.index.time"),
        out = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.index.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} {WF}/vargeno/vargeno index {input.ref} {input.vcf} {params.index_prefix} &> {log.out}
        """

rule vg_geno:
    input:
        vcf = pjoin(root_fold, mid_fold_name, vcf_vg_fname),
        sample = pjoin(root_fold, mid_fold_name, sample_fname),
        index = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.index.chrlens")
    output:
        vcf = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.vcf")
    params:
        index_prefix = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.index")
    log:
        time = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.geno.time"),
        out = pjoin(root_fold, out_fold_name, "vargeno", "vargeno.geno.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} {WF}/vargeno/vargeno geno {params.index_prefix} {input.sample} {input.vcf} {output.vcf} &> {log.out}
        """

### DISCOSNP++ ###
rule discosnp:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        sample = pjoin(root_fold, mid_fold_name, sample_fname)
    output:
        vcf = pjoin(root_fold, out_fold_name, "discosnp", "discosnp.vcf")
    params:
        unsortedvcf = pjoin(root_fold, out_fold_name, "discosnp", "discosnp.unsorted.vcf"),
        prefix = pjoin(root_fold, out_fold_name, "discosnp", "discosnp"),
        tmp = "sample_path.tmp.txt"
    log:
        time = pjoin(root_fold, out_fold_name, "discosnp", "discosnp.time"),
        out = pjoin(root_fold, out_fold_name, "discosnp", "discosnp.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        echo {input.sample} > {params.tmp}
        run_discoSnp++.sh -r {params.tmp} -G {input.ref} -R -u 4 #-p {params.prefix}
        mv discoRes* {params.prefix}
	rm {params.tmp}
        rm -r trashme*
        python3 {WF}/scripts/complete_vcf_header.py | bcftools sort - > {output.vcf}
        """

### BWA ###
rule bwa_index:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname)
    output:
        index = pjoin(root_fold, mid_fold_name, cleanref_fname + ".bwt")
    log:
        time = pjoin(root_fold, out_fold_name, "bwa", "bwa.index.time"),
        out = pjoin(root_fold, out_fold_name, "bwa", "bwa.index.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} bwa index {input.ref} &> {log.out}
        """

rule bwa_mem:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        index = pjoin(root_fold, mid_fold_name, cleanref_fname + ".bwt"),
        sample = pjoin(root_fold, mid_fold_name, sample_fname)
    output:
        bam = pjoin(root_fold, out_fold_name, "bwa", "bwa.bam")
    params:
        sam = pjoin(root_fold, out_fold_name, "bwa", "bwa.sam")
    log:
        time = pjoin(root_fold, out_fold_name, "bwa", "bwa.align.time"),
        out = pjoin(root_fold, out_fold_name, "bwa", "bwa.align.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} bwa mem -t 4 -R '@RG\\tID:group1\\tSM:NA12878\\tPL:illumina\\tLB:lib1\\tPU:unit1' {input.ref} {input.sample} > {params.sam} 2> {log.out}
        /usr/bin/time -v --append -o {log.time} bash -c "samtools view -bS -@ 3 {params.sam} | samtools sort -@ 3 -" > {output.bam} 2>> {log.out}
        /usr/bin/time -v --append -o {log.time} samtools index {output.bam} 2>> {log.out}
        rm -f {params.sam}
        """

### BCFTOOLS ###
rule bcftools:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        bam = pjoin(root_fold, out_fold_name, "bwa", "bwa.bam")
    output:
        vcf = pjoin(root_fold, out_fold_name, "bcftools", "bcftools.vcf")
    log:
        time = pjoin(root_fold, out_fold_name, "bcftools", "bcftools.time"),
        out = pjoin(root_fold, out_fold_name, "bcftools", "bcftools.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} bash -c "bcftools mpileup --threads 3 -Ou -f {input.ref} {input.bam} | bcftools call --threads 3 -f GQ -mv -Ov -o {output.vcf}" 2> {log.out}
        """

### GATK (best-practices) ###
rule gatk_mark_dup:
    input:
        bam = pjoin(root_fold, out_fold_name, "bwa", "bwa.bam")
    output:
        dedup_bam = pjoin(root_fold, out_fold_name, "gatk", "gatk.dedup_reads.bam"),
        metrics = pjoin(root_fold, out_fold_name, "gatk", "gatk.dedup_reads.metrics")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.mark_dup.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.mark_dup.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk MarkDuplicates \
                                            -I {input.bam} \
                                            -O {output.dedup_bam} \
                                            -M {output.metrics} \
                                            -ASO coordinate &> {log.out}
        """

rule gatk_index_vcf:
    input:
        vcf = pjoin(root_fold, in_fold_name, vcf_fname)
    output:
        indexed_vcf = pjoin(root_fold, in_fold_name, vcf_fname + ".idx")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.index_vcf.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.index_vcf.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk IndexFeatureFile -F {input.vcf} &> {log.out}
        """

rule gatk_base_recalib:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        ref_index = pjoin(root_fold, mid_fold_name, cleanref_fname + ".fai"),
        ref_dict = pjoin(root_fold, mid_fold_name, cleanref_fname[:-3] + ".dict"),
        vcf = pjoin(root_fold, in_fold_name, vcf_fname),
        indexed_vcf = pjoin(root_fold, in_fold_name, vcf_fname + ".idx"),
        dedup_bam = pjoin(root_fold, out_fold_name, "gatk", "gatk.dedup_reads.bam")
    output:
        recal_data = pjoin(root_fold, out_fold_name, "gatk", "gatk.recal_data.grp")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.base_recalib.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.base_recalib.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk BaseRecalibrator \
                                            -R {input.ref} \
                                            -I  {input.dedup_bam} \
                                            --known-sites {input.vcf} \
                                            -O {output.recal_data} &> {log.out}
        """

rule gatk_apply_bqsr:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        vcf = pjoin(root_fold, in_fold_name, vcf_fname),
        dedup_bam = pjoin(root_fold, out_fold_name, "gatk", "gatk.dedup_reads.bam"),
        recal_data = pjoin(root_fold, out_fold_name, "gatk", "gatk.recal_data.grp")
    output:
        recal_bam = pjoin(root_fold, out_fold_name, "gatk", "gatk.recal_reads.bam")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.apply_bqsr.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.apply_bqsr.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk ApplyBQSR \
                                            -R {input.ref} \
                                            -I {input.dedup_bam} \
                                            --bqsr-recal-file {input.recal_data} \
                                            -O {output.recal_bam} &> {log.out}
        """

rule gatk_hc:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        recal_bam = pjoin(root_fold, out_fold_name, "gatk", "gatk.recal_reads.bam")
    output:
        raw_vcf = pjoin(root_fold, out_fold_name, "gatk", "gatk.raw.vcf")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.hc.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.hc.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk HaplotypeCaller \
                                       -R {input.ref} \
                                       -I {input.recal_bam} \
                                       -O {output.raw_vcf} \
                                       --genotyping-mode DISCOVERY \
                                       --output-mode EMIT_VARIANTS_ONLY &> {log.out}
        """

rule index_snp_res:
    input:
        dbsnp = gatk_snp_res[0],
        hapmap = gatk_snp_res[2],
        omni = gatk_snp_res[4],
        onekgen = gatk_snp_res[6]
    output:
        dbsnp_idx = gatk_snp_res[1],
        hapmap_idx = gatk_snp_res[3],
        omni_idx = gatk_snp_res[5],
        onekgen_idx = gatk_snp_res[7]
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        gatk IndexFeatureFile -F {input.dbsnp}
        gatk IndexFeatureFile -F {input.hapmap}
        gatk IndexFeatureFile -F {input.omni}
        gatk IndexFeatureFile -F {input.onekgen}
        """
        
rule gatk_snp_recal:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        raw_vcf = pjoin(root_fold, out_fold_name, "gatk", "gatk.raw.vcf"),
        dbsnp = gatk_snp_res[0],
        dbsnp_idx = gatk_snp_res[1],
        hapmap = gatk_snp_res[2],
        hapmap_idx = gatk_snp_res[3],
        omni = gatk_snp_res[4],
        omni_idx = gatk_snp_res[5],
        onekgen = gatk_snp_res[6],
        onekgen_idx = gatk_snp_res[7]
    output:
        snp_tranches = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_SNP.tranches"),
        snp_recal = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_SNP.recal")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.snp_recal.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.snp_recal.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk VariantRecalibrator \
                                       -R {input.ref} \
                                       -V {input.raw_vcf} \
                                       --resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.hapmap} \
                                       --resource:omni,known=false,training=true,truth=true,prior=12.0 {input.omni} \
                                       --resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.onekgen} \
                                       --resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.dbsnp} \
                                       --tranches-file {output.snp_tranches} \
                                       -O {output.snp_recal} \
                                       -an DP \
                                       -an QD \
                                       -an FS \
                                       -an SOR \
                                       -an MQRankSum \
                                       -an ReadPosRankSum \
                                       -mode SNP \
                                       -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
                                       --max-gaussians 8 \
                                       --minimum-bad-variants 1000 &> {log.out}
        """

rule gatk_snp_vqsr:
    input:
        raw_vcf = pjoin(root_fold, out_fold_name, "gatk", "gatk.raw.vcf"),
        snp_tranches = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_SNP.tranches"),
        snp_recal = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_SNP.recal")
    output:
        vcf_rawindels = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrated_snps_raw_indels.vcf")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.snp_vqsr.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.snp_vqsr.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk ApplyVQSR \
                                            -V {input.raw_vcf} \
                                            --recal-file {input.snp_recal}  \
                                            --tranches-file {input.snp_tranches} \
                                            -mode SNP \
                                            -ts-filter-level 99.0 \
                                            -O {output.vcf_rawindels} &> {log.out}
        """

rule index_indel_res:
    input:
        mills = gatk_indels_res[0]
    output:
        mills_idx = gatk_indels_res[1]
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        gatk IndexFeatureFile -F {input.mills}
        """

rule gatk_indel_recal:
    input:
        ref = pjoin(root_fold, mid_fold_name, cleanref_fname),
        vcf_rawindels = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrated_snps_raw_indels.vcf"),
        mills = gatk_indels_res[0],
        mills_idx = gatk_indels_res[1]
    output:
        indel_tranches = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_INDEL.tranches"),
        indel_recal = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_INDEL.recal")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.indel_recal.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.indel_recal.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk VariantRecalibrator \
                                       -R {input.ref} \
                                       -V {input.vcf_rawindels} \
                                       --resource mills,known=false,training=true,truth=true,prior=12.0:{input.mills}  \
                                       --tranches-file {output.indel_tranches} \
                                       -O {output.indel_recal} \
                                       -an DP \
                                       -an QD \
                                       -an FS \
                                       -an SOR \
                                       -an MQRankSum \
                                       -an ReadPosRankSum \
                                       -mode INDEL \
                                       -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
                                       --max-gaussians 4 &> {log.out}
        """

rule gatk_indel_vqsr:
    input:
        vcf_rawindels = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrated_snps_raw_indels.vcf"),
        indel_tranches = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_INDEL.tranches"),
        indel_recal = pjoin(root_fold, out_fold_name, "gatk", "gatk.recalibrate_INDEL.recal")
    output:
        vcf = pjoin(root_fold, out_fold_name, "gatk", "gatk.vcf")
    log:
        time = pjoin(root_fold, out_fold_name, "gatk", "gatk.indel_vqsr.time"),
        out = pjoin(root_fold, out_fold_name, "gatk", "gatk.indel_vqsr.log")
    conda:
        "envs/malva_exps.yaml"
    shell:
        """
        /usr/bin/time -v -o {log.time} gatk ApplyVQSR \
                                       -V {input.vcf_rawindels} \
                                       --recal-file {input.indel_recal}  \
                                       --tranches-file {input.indel_tranches} \
                                       -mode INDEL \
                                       -ts-filter-level 99.0 \
                                       -O {output.vcf} &> {log.out}
        """
